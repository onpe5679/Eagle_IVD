@startuml
actor User
participant "index.html" as UI
participant "plugin.js" as Plugin
participant "DownloadManager" as DM
participant "yt-dlp.exe" as ytDlp
participant "Eagle API" as Eagle
participant "Filesystem" as FS

User -> UI : Enter Playlist URL
User -> UI : Click "Download"
UI -> Plugin : window.handleDownloadPlaylist(url, format, quality, speedLimit, concurrency)
activate Plugin

Plugin -> DM : getPlaylistMetadata(url)
activate DM
DM -> ytDlp : spawn(yt-dlp.exe, getPlaylistMetadataArgs)
activate ytDlp
ytDlp -> ytDlp : Parse metadata
ytDlp --> DM : Metadata (JSON array)
deactivate ytDlp
DM --> Plugin : Metadata
deactivate DM

Plugin -> DM : startDownload(url, format, quality, speedLimit, concurrency)
activate DM
DM -> DM : constructArgs(url, format, quality, speedLimit, tempFolder)
DM -> FS : Create temp folder for playlist (if not exists)
activate FS
deactivate FS
DM -> ytDlp : spawn(yt-dlp.exe, downloadArgs)
activate ytDlp
ytDlp -> FS : Download video files
activate FS
FS --> ytDlp : Download progress
deactivate FS
ytDlp -> Plugin : Update UI with progress
Plugin -> UI : Update status, logs, command preview
ytDlp --> DM : Exit code (0)
deactivate ytDlp

DM -> Plugin : Download complete
deactivate DM
Plugin -> Plugin : importAndRemoveDownloadedFiles(downloadFolder, url, metadata)
activate Plugin
Plugin -> FS : Read files from download folder
activate FS
FS --> Plugin : Files list
deactivate FS
Plugin -> Eagle : eagle.folder.create(playlistName) if not exists
activate Eagle
Eagle --> Plugin : Success/Error (Folder ID)
deactivate Eagle
loop for each file
    Plugin -> Eagle : eagle.item.addFromPath(filePath, fileMetadata)
    activate Eagle
    Eagle --> Plugin : Success/Error (Item ID)
    deactivate Eagle
    Plugin -> FS : fs.unlink(filePath)
end
Plugin -> FS : Remove temp folder
Plugin -> UI : Update UI with "Download complete!"
deactivate Plugin
UI --> User : Display download status

@enduml