title 영상 다운로드 및 구독 확인 과정 상세 다이어그램 (최적화 버전)

actor 사용자
participant "클라이언트 UI" as UI
participant "SubscriptionManager" as SubManager
participant "DownloadManager" as DLManager
participant "Eagle API" as Eagle
participant "yt-dlp 프로세스" as ytdlp
participant "파일 시스템" as FS
participant "YouTube 서버" as YouTube

note over 사용자, YouTube: 구독 추가 프로세스

사용자->UI: 구독 추가 버튼 클릭
activate UI

UI->UI: 구독 정보 입력 폼 표시
사용자->UI: URL, 폴더명, 형식, 품질 입력
UI->SubManager: addSubscription({url, folderName, format, quality}) 호출
activate SubManager

SubManager->SubManager: 중복 구독 확인 (this.subscriptions.find(s => s.url === url))
alt 이미 구독 중인 경우
    SubManager-->UI: throw new Error("Already subscribed to that URL")
    UI-->사용자: "이미 구독 중인 URL입니다" 오류 표시
else 새 구독인 경우
    SubManager->DLManager: getMetadata(url) 호출
    activate DLManager
    
    DLManager->ytdlp: "--print-json --skip-download" 명령 실행
    activate ytdlp
    ytdlp->YouTube: 메타데이터 요청
    activate YouTube
    YouTube-->ytdlp: 메타데이터 반환
    deactivate YouTube
    ytdlp-->DLManager: 메타데이터 반환 (JSON 형식)
    deactivate ytdlp
    
    DLManager-->SubManager: 메타데이터 객체 반환 (title, entries 등)
    deactivate DLManager
    
    SubManager->SubManager: 구독 정보 생성 및 videoIds 추출
    SubManager->FS: saveSubscriptions() - 구독 정보를 JSON 파일로 저장
    SubManager->SubManager: emit('subscriptionAdded', newSub) 이벤트 발생
    SubManager-->UI: 구독 추가 완료
    UI-->사용자: "구독이 추가되었습니다" 메시지 표시
end
deactivate SubManager

note over 사용자, YouTube: 새 영상 확인 및 다운로드 프로세스 (병렬 처리)

사용자->UI: "새 비디오 확인" 버튼 클릭
UI->SubManager: checkAllSubscriptions(progressCallback, concurrency=3) 호출
activate SubManager

SubManager->SubManager: 이미 확인 중인지 검사 (this.isChecking)
alt 이미 확인 중인 경우
    SubManager-->UI: 이미 확인 중임을 알림
    UI-->사용자: "이미 구독 확인 중입니다. 기다려주세요." 메시지 표시
else 새 확인 시작
    SubManager->SubManager: this.isChecking = true 설정
    SubManager->SubManager: 구독 목록 배열 복사 ([...this.subscriptions])
    SubManager->SubManager: 결과 배열 초기화 (results = [])
    
    SubManager->SubManager: processInBatches() 함수 호출 시작
    
    loop 구독 목록이 남아있는 동안
        SubManager->SubManager: 배치 생성 (subscriptions.splice(0, concurrency))
        
        note over SubManager: 병렬 처리 시작 (최대 3개 구독 동시 처리)
        
        SubManager->SubManager: Promise.all()로 배치 내 모든 구독 동시 처리
        
        group 첫 번째 구독 처리
            SubManager->SubManager: checkSubscription(batch[0], current, total, progressCallback)
            
            SubManager->ytdlp: Phase 1 - "--skip-download --flat-playlist --print-json --no-warnings" 명령 실행
            activate ytdlp
            ytdlp->YouTube: 경량화된 재생목록 메타데이터 요청
            activate YouTube
            YouTube-->ytdlp: 경량화된 영상 메타데이터 반환
            deactivate YouTube
            ytdlp-->SubManager: 버퍼 처리를 통한 JSON 파싱 및 영상 ID 목록 추출
            deactivate ytdlp
            
            SubManager->SubManager: 효율적인 ID 필터링 (Set 사용)
            note right of SubManager: const videoIdSet = new Set(sub.videoIds);\nconst newVideoIds = fetchedVideoIds.filter(id => !videoIdSet.has(id));
            
            alt 새 비디오가 없는 경우
                SubManager->UI: updateStatusUI("${sub.title}: 새 영상 없음")
                UI-->사용자: "새 비디오가 없습니다" 메시지 표시
            else 새 비디오가 있는 경우
                SubManager->FS: 임시 폴더 생성 (subscription_playlistId)
                
                SubManager->SubManager: 배치 단위로 URL 그룹화 (batchSize=30)
                
                loop 각 URL 배치에 대해 (Phase 2)
                    SubManager->ytdlp: Phase 2 - "--skip-download --print-json --no-warnings" 메타데이터 요청
                    activate ytdlp
                    ytdlp->YouTube: 상세 메타데이터 요청 (배치 단위)
                    activate YouTube
                    YouTube-->ytdlp: 상세 메타데이터 반환
                    deactivate YouTube
                    ytdlp-->SubManager: 버퍼 처리를 통한 상세 메타데이터 추출 및 저장
                    deactivate ytdlp
                end
                
                loop 각 영상 다운로드 배치에 대해 (Phase 3, 배치 크기=5)
                    SubManager->UI: updateStatusUI("${sub.title}: 영상 다운로드 중 (x-y/total)")
                    SubManager->ytdlp: Phase 3 - 다운로드 명령 실행 (배치 단위)
                    activate ytdlp
                    ytdlp->YouTube: 각 새 비디오 다운로드 요청 (5개씩)
                    activate YouTube
                    YouTube-->ytdlp: 비디오 컨텐츠 스트림
                    deactivate YouTube
                    ytdlp->FS: 임시 폴더에 파일 저장
                    ytdlp-->SubManager: 다운로드 진행상황
                    deactivate ytdlp
                end
                
                SubManager->SubManager: downloadedVideoIds 추적 및 구독 정보 업데이트
                SubManager->FS: saveSubscriptions() - 갱신된 videoIds 저장
                
                SubManager->SubManager: importAndRemoveDownloadedFiles() 호출
                
                SubManager->Eagle: folder.getAll() - 전체 폴더 목록 가져오기
                activate Eagle
                Eagle-->SubManager: 모든 폴더 목록
                
                alt 매칭되는 폴더가 존재하는 경우
                    SubManager->SubManager: 기존 폴더 ID 사용
                else 매칭되는 폴더가 없는 경우
                    SubManager->Eagle: folder.create({name: folderName})
                    Eagle-->SubManager: 생성된 폴더 ID
                end
                
                loop 다운로드된 각 파일에 대해
                    SubManager->SubManager: 파일 메타데이터 추출
                    SubManager->Eagle: isDuplicate(videoUrl, videoId) 확인
                    
                    alt 중복되지 않은 파일인 경우
                        SubManager->Eagle: item.addFromPath(filePath, fileMetadata)
                        Eagle-->SubManager: 추가된 아이템 ID
                    else 이미 존재하는 파일인 경우
                        SubManager->Eagle: item.get({website: searchURL})
                        Eagle-->SubManager: 기존 아이템 목록
                        
                        SubManager->Eagle: item.modify(itemId, {folders: newFolders})
                        Eagle-->SubManager: 수정 결과
                    end
                    
                    SubManager->FS: fs.unlink(filePath) - 임시 파일 삭제
                end
                deactivate Eagle
                
                SubManager->FS: fs.rm(tempFolder, {recursive: true}) - 임시 폴더 삭제
            end
        end
        
        note over SubManager: 동시에 두 번째, 세 번째 구독도 같은 방식으로 처리됨
        
        SubManager->SubManager: 모든 배치 작업 완료 후 결과 수집
        SubManager->SubManager: 결과를 results 배열에 추가
    end
    
    SubManager->SubManager: 결과 요약 (새 영상이 있는 플레이리스트 수 계산)
    SubManager->UI: updateStatusUI("구독 확인 완료: X개 중 Y개에서 새 영상 발견")
    UI-->사용자: 결과 요약 메시지 표시
    
    SubManager->SubManager: this.isChecking = false 설정
    SubManager->SubManager: emit('checkComplete') 이벤트 발생
    SubManager-->UI: 구독 확인 완료
end

deactivate SubManager
deactivate UI 