@startuml
skinparam sequenceArrowThickness 2

title 구독 추가 및 영상 다운로드 프로세스 상세 다이어그램

actor 사용자
participant "클라이언트 UI" as UI
participant "SubscriptionManager" as SubManager
participant "DownloadManager" as DLManager
participant "Eagle Library" as Eagle
participant "yt-dlp 프로세스" as ytdlp
participant "YouTube 서버" as YouTube
participant "파일 시스템" as FS
participant "구독 DB (JSON)" as DB

== 구독 추가 프로세스 ==
사용자 -> UI: 구독 추가 버튼 클릭
activate UI

UI -> UI: 구독 정보 입력 폼 표시
사용자 -> UI: URL, 폴더명, 형식, 품질 입력
UI -> SubManager: addSubscription(url, folderName, format, quality)
activate SubManager

note over SubManager: 중복 구독 확인\nthis.subscriptions.find(s => s.url === url)

alt 이미 구독 중
    SubManager --> UI: throw Error("Already subscribed to that URL")
    UI --> 사용자: "이미 구독 중인 URL입니다" 오류 표시
else 신규 구독
    SubManager -> DLManager: getMetadata(url)
    activate DLManager
    
    DLManager -> ytdlp: ytdlp --print-json --skip-download url
    activate ytdlp
    ytdlp -> YouTube: 메타데이터 요청
    activate YouTube
    YouTube --> ytdlp: 메타데이터 반환
    deactivate YouTube
    ytdlp --> DLManager: JSON 메타데이터
    deactivate ytdlp
    
    DLManager --> SubManager: 메타데이터 객체 (title, entries 등)
    deactivate DLManager
    
    SubManager -> SubManager: 구독 정보 생성 및 videoIds 추출
    SubManager -> DB: saveSubscriptions() - JSON 파일로 저장
    SubManager -> UI: emit('subscriptionAdded', newSub)
    UI --> 사용자: "구독이 추가되었습니다" 메시지 표시
end
deactivate SubManager

== 새 영상 확인 및 다운로드 프로세스 ==
사용자 -> UI: "새 비디오 확인" 버튼 클릭
activate UI
UI -> SubManager: checkAllSubscriptions(progressCallback, concurrency=3)
activate SubManager

note over SubManager: 작업 상태 초기화\nthis.isChecking = true

SubManager -> SubManager: 구독 목록 배열 복사 ([...this.subscriptions])
SubManager -> SubManager: processInBatches(subs, concurrency=3)

loop 배치 처리 (최대 3개 구독 동시 처리)
    group 구독 체크 프로세스
        SubManager -> SubManager: checkSubscription(sub, current, total)
        activate SubManager
        
        SubManager -> ytdlp: Phase 1 - 경량화된 재생목록 메타데이터 요청\n--skip-download --flat-playlist --print-json
        activate ytdlp
        ytdlp -> YouTube: 재생목록 메타데이터 요청
        YouTube --> ytdlp: 경량화된 메타데이터
        ytdlp --> SubManager: 비디오 ID 목록
        deactivate ytdlp
        
        SubManager -> SubManager: 신규 비디오 ID 필터링\nvideoIdSet = new Set(sub.videoIds)\nnewIds = fetchedIds.filter(id => !videoIdSet.has(id))
        
        alt 신규 영상 없음
            SubManager -> UI: updateStatusUI("신규 영상 없음")
        else 신규 영상 있음
            SubManager -> FS: 임시 폴더 생성 (subscription_playlistId)
            
            loop 상세 메타데이터 수집 (배치 크기=30)
                SubManager -> ytdlp: Phase 2 - 상세 메타데이터 요청\n--skip-download --print-json
                activate ytdlp
                ytdlp -> YouTube: 상세 메타데이터 요청
                YouTube --> ytdlp: 상세 메타데이터
                ytdlp --> SubManager: 상세 메타데이터 JSON
                deactivate ytdlp
                SubManager -> SubManager: 메타데이터 저장
            end
            
            loop 비디오 다운로드 (배치 크기=5)
                SubManager -> UI: updateStatusUI("다운로드 중...")
                SubManager -> ytdlp: Phase 3 - 비디오 다운로드\n--no-skip-download --format {format}
                activate ytdlp
                ytdlp -> YouTube: 비디오 스트림 요청
                YouTube --> ytdlp: 비디오 스트림
                ytdlp -> FS: 임시 폴더에 파일 저장
                ytdlp --> SubManager: 다운로드 진행률
                deactivate ytdlp
            end
            
            SubManager -> SubManager: importAndRemoveDownloadedFiles(ids, tempFolder)
            activate SubManager
            
            SubManager -> Eagle: folder.getAll()
            Eagle --> SubManager: 폴더 목록
            
            alt 매칭되는 폴더 존재
                SubManager -> Eagle: folder.get({name: folderName})
            else
                SubManager -> Eagle: folder.create({name: folderName})
            end
            
            loop 각 다운로드 파일
                SubManager -> Eagle: isDuplicate(videoUrl, videoId)
                alt 중복 아님
                    SubManager -> Eagle: item.addFromPath(filePath, metadata)
                else
                    SubManager -> Eagle: item.get({website: searchURL})
                    SubManager -> Eagle: item.modify(itemId, {folders: newFolders})
                end
                SubManager -> FS: fs.unlink(filePath) - 임시 파일 삭제
            end
            
            SubManager -> FS: fs.rm(tempFolder, {recursive: true})
            deactivate SubManager
        end
        deactivate SubManager
    end
end

SubManager -> SubManager: this.isChecking = false
SubManager -> UI: emit('checkComplete')
UI --> 사용자: 작업 완료 메시지 표시

deactivate SubManager
deactivate UI

@enduml 